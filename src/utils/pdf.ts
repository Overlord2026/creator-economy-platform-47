/**
 * PDF generation utilities for AIES evidence bundles
 * Creates cover summary PDFs for receipt packages
 */

import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';

interface ReceiptData {
  id: string;
  org_id: string;
  domain: string;
  use_case: string;
  close_cycle_id: string;
  as_of_date: string;
  materiality_bucket: string;
  receipt_hash: string;
  canonical_receipt: any;
  created_at: string;
}

interface SignatureData {
  id: number;
  receipt_id: string;
  alg: string;
  key_ref: string;
  sig_b64: string;
  created_at: string;
}

interface PolicyMetadata {
  name?: string;
  version?: string;
  url?: string;
  description?: string;
}

/**
 * Build a cover summary PDF for an AIES receipt
 * @param receipt - Receipt data
 * @param signatures - Array of signatures
 * @param policyMeta - Policy metadata
 * @returns PDF bytes
 */
export async function buildCoverSummaryPDF(
  receipt: ReceiptData,
  signatures: SignatureData[],
  policyMeta?: PolicyMetadata
): Promise<Uint8Array> {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([612, 792]); // US Letter size
  const { width, height } = page.getSize();
  
  // Embed standard font
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  
  let yPosition = height - 50;
  const leftMargin = 50;
  const lineHeight = 20;
  
  // Helper function to add text
  const addText = (text: string, options: { 
    font?: any; 
    size?: number; 
    color?: any; 
    x?: number;
    bold?: boolean;
  } = {}) => {
    const textFont = options.bold ? boldFont : (options.font || font);
    const textSize = options.size || 12;
    const textColor = options.color || rgb(0, 0, 0);
    const textX = options.x || leftMargin;
    
    page.drawText(text, {
      x: textX,
      y: yPosition,
      size: textSize,
      font: textFont,
      color: textColor,
    });
    yPosition -= lineHeight;
  };
  
  // Title
  addText('AIES Receipt Evidence Bundle', { 
    font: boldFont, 
    size: 18, 
    color: rgb(0.2, 0.2, 0.7),
    x: leftMargin
  });
  
  yPosition -= 10;
  
  // Receipt Information
  addText('Receipt Information', { bold: true, size: 14 });
  addText(`Receipt ID: ${receipt.id}`);
  addText(`Organization: ${receipt.org_id}`);
  addText(`Domain: ${receipt.domain}`);
  addText(`Use Case: ${receipt.use_case}`);
  addText(`Close Cycle: ${receipt.close_cycle_id}`);
  addText(`As of Date: ${receipt.as_of_date}`);
  addText(`Materiality: ${receipt.materiality_bucket}`);
  addText(`Created: ${new Date(receipt.created_at).toLocaleString()}`);
  
  yPosition -= 10;
  
  // Hash Information
  addText('Cryptographic Verification', { bold: true, size: 14 });
  addText(`Receipt Hash: ${receipt.receipt_hash.substring(0, 32)}...`);
  addText(`Hash Algorithm: SHA-256`);
  
  yPosition -= 10;
  
  // Signatures
  addText('Digital Signatures', { bold: true, size: 14 });
  if (signatures.length === 0) {
    addText('No signatures present', { color: rgb(0.7, 0.3, 0.3) });
  } else {
    signatures.forEach((sig, index) => {
      addText(`Signature ${index + 1}:`);
      addText(`  Algorithm: ${sig.alg}`, { x: leftMargin + 20 });
      addText(`  Key Reference: ${sig.key_ref}`, { x: leftMargin + 20 });
      addText(`  Created: ${new Date(sig.created_at).toLocaleString()}`, { x: leftMargin + 20 });
      addText(`  Signature: ${sig.sig_b64.substring(0, 40)}...`, { x: leftMargin + 20 });
    });
  }
  
  yPosition -= 10;
  
  // Policy Information
  if (policyMeta) {
    addText('Policy Information', { bold: true, size: 14 });
    if (policyMeta.name) addText(`Policy Name: ${policyMeta.name}`);
    if (policyMeta.version) addText(`Version: ${policyMeta.version}`);
    if (policyMeta.url) addText(`URL: ${policyMeta.url}`);
    if (policyMeta.description) addText(`Description: ${policyMeta.description}`);
  }
  
  yPosition -= 20;
  
  // Verification Instructions
  addText('Verification Instructions', { bold: true, size: 14 });
  addText('1. Hash the 01_Receipt.json file using SHA-256');
  addText('2. Compare the computed hash with the receipt_hash above');
  addText('3. Verify digital signatures using the provided public keys');
  addText('4. Check anchor information in 06_Anchor.txt if present');
  
  yPosition -= 20;
  
  // Footer
  addText('Generated by AIES (AI Evidence System)', { 
    size: 10, 
    color: rgb(0.5, 0.5, 0.5),
    x: leftMargin
  });
  addText(`Bundle created: ${new Date().toISOString()}`, { 
    size: 10, 
    color: rgb(0.5, 0.5, 0.5),
    x: leftMargin
  });
  
  return await pdfDoc.save();
}

/**
 * Generate a placeholder policy PDF when no policy document is available
 * @param policyMeta - Policy metadata
 * @returns PDF bytes
 */
export async function generatePolicyPlaceholderPDF(policyMeta?: PolicyMetadata): Promise<Uint8Array> {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([612, 792]);
  const { width, height } = page.getSize();
  
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  
  let yPosition = height - 100;
  const leftMargin = 50;
  const lineHeight = 20;
  
  // Title
  page.drawText('AIES Policy Document', {
    x: leftMargin,
    y: yPosition,
    size: 18,
    font: boldFont,
    color: rgb(0.2, 0.2, 0.7),
  });
  yPosition -= 40;
  
  // Content
  page.drawText('Policy Information:', {
    x: leftMargin,
    y: yPosition,
    size: 14,
    font: boldFont,
  });
  yPosition -= 30;
  
  if (policyMeta) {
    if (policyMeta.name) {
      page.drawText(`Name: ${policyMeta.name}`, {
        x: leftMargin,
        y: yPosition,
        size: 12,
        font: font,
      });
      yPosition -= lineHeight;
    }
    
    if (policyMeta.version) {
      page.drawText(`Version: ${policyMeta.version}`, {
        x: leftMargin,
        y: yPosition,
        size: 12,
        font: font,
      });
      yPosition -= lineHeight;
    }
    
    if (policyMeta.description) {
      page.drawText(`Description: ${policyMeta.description}`, {
        x: leftMargin,
        y: yPosition,
        size: 12,
        font: font,
      });
      yPosition -= lineHeight;
    }
  } else {
    page.drawText('No policy metadata available.', {
      x: leftMargin,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0.7, 0.3, 0.3),
    });
  }
  
  yPosition -= 40;
  
  page.drawText('This is a placeholder policy document.', {
    x: leftMargin,
    y: yPosition,
    size: 12,
    font: font,
    color: rgb(0.5, 0.5, 0.5),
  });
  yPosition -= lineHeight;
  
  page.drawText('For the actual policy, please refer to the policy URL', {
    x: leftMargin,
    y: yPosition,
    size: 12,
    font: font,
    color: rgb(0.5, 0.5, 0.5),
  });
  yPosition -= lineHeight;
  
  page.drawText('or contact your system administrator.', {
    x: leftMargin,
    y: yPosition,
    size: 12,
    font: font,
    color: rgb(0.5, 0.5, 0.5),
  });
  
  return await pdfDoc.save();
}