// Import jsPDF for PDF generation
import jsPDF from 'jspdf';

export interface SummaryData {
  title: string;
  summary: string;
  bullets: string[];
  actions: string[];
  risks: string[];
  speakers?: string[];
  date?: string;
}

export function generateSummaryPdf(data: SummaryData): Uint8Array {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  let currentY = margin;

  // Helper function to add text with word wrap
  const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    
    const lines = doc.splitTextToSize(text, maxWidth);
    const lineHeight = fontSize * 0.5;
    
    // Check if we need a new page
    if (currentY + (lines.length * lineHeight) > doc.internal.pageSize.getHeight() - margin) {
      doc.addPage();
      currentY = margin;
    }
    
    doc.text(lines, margin, currentY);
    currentY += lines.length * lineHeight + 5;
  };

  // Add header
  addText(data.title || 'Meeting Summary', 18, true);
  
  if (data.date) {
    addText(`Date: ${data.date}`, 10);
  }
  
  if (data.speakers && data.speakers.length > 0) {
    addText(`Participants: ${data.speakers.join(', ')}`, 10);
  }
  
  currentY += 10; // Extra spacing

  // Add summary
  if (data.summary) {
    addText('Executive Summary', 14, true);
    addText(data.summary, 11);
    currentY += 5;
  }

  // Add bullet points
  if (data.bullets && data.bullets.length > 0) {
    addText('Key Discussion Points', 14, true);
    data.bullets.forEach(bullet => {
      addText(`• ${bullet}`, 11);
    });
    currentY += 5;
  }

  // Add action items
  if (data.actions && data.actions.length > 0) {
    addText('Action Items', 14, true);
    data.actions.forEach((action, index) => {
      addText(`${index + 1}. ${action}`, 11);
    });
    currentY += 5;
  }

  // Add risks
  if (data.risks && data.risks.length > 0) {
    addText('Risks & Concerns', 14, true);
    data.risks.forEach(risk => {
      addText(`⚠ ${risk}`, 11);
    });
    currentY += 5;
  }

  // Add footer
  currentY += 10;
  addText('Generated by Family Office CFO Platform', 8);
  addText(`Generated on: ${new Date().toLocaleString()}`, 8);

  // Add proof slip reference
  currentY += 5;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  doc.text('This document is part of an auditable meeting record with cryptographic proof.', margin, currentY);

  // Return as Uint8Array
  const pdfBytes = doc.output('arraybuffer');
  return new Uint8Array(pdfBytes);
}

export function generatePlainSummaryPdf(
  title: string, 
  content: string, 
  participants?: string[]
): Uint8Array {
  return generateSummaryPdf({
    title,
    summary: content,
    bullets: [],
    actions: [],
    risks: [],
    speakers: participants,
    date: new Date().toLocaleDateString()
  });
}