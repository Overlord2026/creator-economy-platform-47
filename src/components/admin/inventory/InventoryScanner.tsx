import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Search, Download, ExternalLink, CheckCircle, XCircle, Server, Database, Code, Webhook, Key, Folder } from 'lucide-react';

interface InventoryItem {
  name: string;
  path: string;
  type: string;
  category: string;
  status?: 'present' | 'missing' | 'unknown';
  notes?: string;
  methods?: string[];
  envVars?: string[];
  imports?: string[];
}

export function InventoryScanner() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  
  // Mock inventory data - in real implementation, this would be generated by scanning the codebase
  const mockInventoryData: InventoryItem[] = [
    // Routes & Pages
    {
      name: '/admin/inventory',
      path: 'src/pages/admin/AdminInventory.tsx',
      type: 'page',
      category: 'routes',
      status: 'present',
      notes: 'Protected admin route'
    },
    {
      name: '/marketplace/creators',
      path: 'src/pages/marketplace/CreatorsPage.tsx',
      type: 'page',
      category: 'routes',
      status: 'present'
    },
    {
      name: '/admin/diagnostics',
      path: 'src/pages/admin/AdminDiagnostics.tsx',
      type: 'page',
      category: 'routes',
      status: 'present',
      notes: 'Role protected diagnostics'
    },
    
    // API Routes
    {
      name: '/api/stripe/webhook',
      path: 'src/api/stripe/webhook.ts',
      type: 'api',
      category: 'webhooks',
      status: 'missing',
      methods: ['POST'],
      notes: 'Stripe webhook endpoint'
    },
    {
      name: '/api/leads-invite',
      path: 'src/api/leads-invite.ts',
      type: 'api',
      category: 'api',
      status: 'missing',
      methods: ['POST']
    },
    
    // Supabase Edge Functions
    {
      name: 'admin-diagnostics',
      path: 'supabase/functions/admin-diagnostics/index.ts',
      type: 'edge-function',
      category: 'edge-functions',
      status: 'present',
      notes: 'System diagnostics and health checks',
      envVars: ['STRIPE_SECRET_KEY', 'SUPABASE_URL']
    },
    {
      name: 'plaid-create-link-token',
      path: 'supabase/functions/plaid-create-link-token/index.ts',
      type: 'edge-function',
      category: 'edge-functions',
      status: 'unknown',
      notes: 'Plaid link token creation',
      envVars: ['PLAID_CLIENT_ID', 'PLAID_SECRET']
    },
    
    // Third-party SDK Imports
    {
      name: 'Stripe SDK',
      path: 'src/hooks/useStripePortal.ts',
      type: 'sdk',
      category: 'integrations',
      status: 'present',
      notes: 'Customer portal, payments',
      imports: ['@supabase/supabase-js']
    },
    {
      name: 'Plaid SDK',
      path: 'src/components/accounts/PlaidConnectionTest.tsx',
      type: 'sdk',
      category: 'integrations',
      status: 'present',
      notes: 'Bank account linking, transactions',
      imports: ['react-plaid-link']
    },
    {
      name: 'OpenAI SDK',
      path: 'src/components/ai/',
      type: 'sdk',
      category: 'integrations',
      status: 'unknown',
      notes: 'AI-powered features'
    },
    
    // Environment Variables
    {
      name: 'STRIPE_SECRET_KEY',
      path: 'supabase/functions/',
      type: 'env-var',
      category: 'env-vars',
      status: 'unknown',
      notes: 'Required for Stripe API calls'
    },
    {
      name: 'STRIPE_PUBLISHABLE_KEY',
      path: 'src/config/',
      type: 'env-var',
      category: 'env-vars',
      status: 'unknown',
      notes: 'Client-side Stripe integration'
    },
    {
      name: 'VITE_SUPABASE_URL',
      path: 'src/integrations/supabase/client.ts',
      type: 'env-var',
      category: 'env-vars',
      status: 'present',
      notes: 'Supabase project URL'
    },
    {
      name: 'VITE_SUPABASE_ANON_KEY',
      path: 'src/integrations/supabase/client.ts',
      type: 'env-var',
      category: 'env-vars',
      status: 'present',
      notes: 'Supabase anonymous key'
    },
    
    // Database Tables
    {
      name: 'profiles',
      path: 'Database',
      type: 'table',
      category: 'database',
      status: 'present',
      notes: 'User profiles with stripe_customer_id'
    },
    {
      name: 'advisor_subscriptions',
      path: 'Database',
      type: 'table',
      category: 'database',
      status: 'present',
      notes: 'Advisor billing subscriptions'
    },
    {
      name: 'prospect_invitations',
      path: 'Database',
      type: 'table',
      category: 'database',
      status: 'present',
      notes: 'Magic link invitations'
    },
    
    // Assets
    {
      name: 'favicon.ico',
      path: 'public/favicon.ico',
      type: 'asset',
      category: 'assets',
      status: 'present',
      notes: 'Site favicon'
    },
    {
      name: 'Brand logos',
      path: 'public/brand/',
      type: 'asset',
      category: 'assets',
      status: 'present',
      notes: 'Brand assets and logos'
    }
  ];

  const categories = [
    { id: 'all', label: 'All Items', icon: Folder },
    { id: 'routes', label: 'Routes & Pages', icon: ExternalLink },
    { id: 'api', label: 'API Routes', icon: Server },
    { id: 'webhooks', label: 'Webhooks', icon: Webhook },
    { id: 'edge-functions', label: 'Edge Functions', icon: Code },
    { id: 'integrations', label: 'SDK Integrations', icon: ExternalLink },
    { id: 'env-vars', label: 'Environment Variables', icon: Key },
    { id: 'database', label: 'Database', icon: Database },
    { id: 'assets', label: 'Assets', icon: Folder }
  ];

  const filteredData = useMemo(() => {
    return mockInventoryData.filter(item => {
      const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          item.path.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          (item.notes && item.notes.toLowerCase().includes(searchTerm.toLowerCase()));
      const matchesCategory = selectedCategory === 'all' || item.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });
  }, [searchTerm, selectedCategory, mockInventoryData]);

  const getStatusBadge = (status?: string) => {
    switch (status) {
      case 'present':
        return (
          <Badge className="bg-green-100 text-green-800 hover:bg-green-100">
            <CheckCircle className="w-3 h-3 mr-1" />
            Present
          </Badge>
        );
      case 'missing':
        return (
          <Badge variant="destructive">
            <XCircle className="w-3 h-3 mr-1" />
            Missing
          </Badge>
        );
      default:
        return (
          <Badge variant="secondary">
            Unknown
          </Badge>
        );
    }
  };

  const exportToCSV = (category: string) => {
    const categoryData = mockInventoryData.filter(item => 
      category === 'all' || item.category === category
    );
    
    const headers = ['Type', 'Name', 'Path', 'Status', 'Notes'];
    const csvContent = [
      headers.join(','),
      ...categoryData.map(item => [
        item.type,
        `"${item.name}"`,
        `"${item.path}"`,
        item.status || 'unknown',
        `"${item.notes || ''}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `inventory_${category}_${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Header with search and export */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Server className="w-6 h-6" />
              App Inventory Scanner
            </div>
            <Button onClick={() => exportToCSV('all')} variant="outline" size="sm">
              <Download className="w-4 h-4 mr-2" />
              Export All CSV
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder="Search inventory items..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <div className="text-sm text-muted-foreground">
              {filteredData.length} items found
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Category filters and content */}
      <Tabs value={selectedCategory} onValueChange={setSelectedCategory}>
        <TabsList className="grid w-full grid-cols-5 lg:grid-cols-9">
          {categories.map((category) => {
            const Icon = category.icon;
            return (
              <TabsTrigger key={category.id} value={category.id} className="text-xs">
                <Icon className="w-3 h-3 mr-1" />
                {category.label}
              </TabsTrigger>
            );
          })}
        </TabsList>

        {categories.map((category) => (
          <TabsContent key={category.id} value={category.id}>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <category.icon className="w-5 h-5" />
                    {category.label}
                  </div>
                  <Button 
                    onClick={() => exportToCSV(category.id)} 
                    variant="outline" 
                    size="sm"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Export CSV
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {filteredData.map((item, index) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <span className="font-medium">{item.name}</span>
                          {getStatusBadge(item.status)}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {item.path}
                        </div>
                        {item.notes && (
                          <div className="text-sm text-muted-foreground mt-1">
                            {item.notes}
                          </div>
                        )}
                        {item.methods && (
                          <div className="flex gap-1 mt-1">
                            {item.methods.map((method) => (
                              <Badge key={method} variant="outline" className="text-xs">
                                {method}
                              </Badge>
                            ))}
                          </div>
                        )}
                        {item.envVars && (
                          <div className="flex gap-1 mt-1">
                            {item.envVars.map((envVar) => (
                              <Badge key={envVar} variant="secondary" className="text-xs">
                                {envVar}
                              </Badge>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                  
                  {filteredData.length === 0 && (
                    <div className="text-center py-8 text-muted-foreground">
                      No items found in this category
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        ))}
      </Tabs>
    </div>
  );
}