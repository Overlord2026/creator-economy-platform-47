import { ProPersona } from '../types';

interface SummaryContent {
  title: string;
  summary: string;
  bullets: string[];
  action_items: string[];
  risks: string[];
  persona: ProPersona;
}

interface PDFResult {
  content: string;
  hash: string;
  size: number;
}

export async function generateSummaryPDF(content: SummaryContent): Promise<PDFResult> {
  // In production, this would use a PDF library like jsPDF or similar
  // For now, we'll create a structured text representation
  
  const pdfContent = formatSummaryContent(content);
  const hash = generateContentHash(pdfContent);
  
  return {
    content: pdfContent,
    hash,
    size: pdfContent.length
  };
}

function formatSummaryContent(content: SummaryContent): string {
  const timestamp = new Date().toISOString();
  const personaLabel = getPersonaLabel(content.persona);
  
  return `
MEETING SUMMARY REPORT
Generated: ${timestamp}
Professional: ${personaLabel}
Title: ${content.title}

EXECUTIVE SUMMARY
${content.summary}

KEY DISCUSSION POINTS
${content.bullets.map((bullet, i) => `${i + 1}. ${bullet}`).join('\n')}

ACTION ITEMS
${content.action_items.map((item, i) => `□ ${i + 1}. ${item}`).join('\n')}

${content.risks.length > 0 ? `
RISKS & CONCERNS
${content.risks.map((risk, i) => `⚠ ${i + 1}. ${risk}`).join('\n')}
` : ''}

COMPLIANCE NOTES
- This summary was generated automatically from imported meeting data
- Content has been processed according to ${content.persona} professional standards
- Proof receipt has been generated for audit trail
- Document is vault-protected with secure access controls

---
Generated by Pro Meeting Management System
Document Hash: ${generateContentHash(content.summary + content.title)}
`.trim();
}

function getPersonaLabel(persona: ProPersona): string {
  const labels = {
    advisor: 'Financial Advisor',
    cpa: 'Certified Public Accountant',
    attorney: 'Legal Professional',
    insurance: 'Insurance Professional',
    healthcare: 'Healthcare Professional',
    realtor: 'Real Estate Professional'
  };
  return labels[persona];
}

function generateContentHash(content: string): string {
  // Simple hash for demo - in production use crypto.subtle.digest
  return btoa(content).slice(0, 32);
}

export function createPDFBlob(content: string): Blob {
  return new Blob([content], { type: 'application/pdf' });
}

export function downloadPDF(content: string, filename: string) {
  const blob = createPDFBlob(content);
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
}