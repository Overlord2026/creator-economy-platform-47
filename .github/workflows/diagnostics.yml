
name: Application Diagnostics

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  # Allow manual triggering
  workflow_dispatch:
  # Run daily to catch issues early
  schedule:
    - cron: '0 0 * * *'

jobs:
  run-diagnostics:
    name: Run Application Diagnostics
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          CI: true
          # Set other required environment variables here
          # These will be made available to the app via import.meta.env
          VITE_APP_ENV: 'ci'
          VITE_APP_API_URL: 'https://api.example.com'
        
      - name: Run diagnostics tests
        run: |
          echo "Running diagnostics with verbose output"
          node ./dist/services/diagnostics/ci-scripts/run-diagnostics.js \
            --outputFile=diagnostics-report.json \
            --failOnError=true \
            --notifyOnWarning=true \
            --notifyEmail=team@example.com
        env:
          CI: true
          GITHUB_ACTIONS: true
        
      - name: Upload diagnostics report
        if: always() # Upload even if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: diagnostics-report
          path: diagnostics-report.json
          
      - name: Run Jest tests for diagnostics
        run: npm test -- --testPathPattern=services/diagnostics
        
      # Notify team on failure via GitHub notifications
      - name: Notify team on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
            
            github.rest.issues.create({
              owner,
              repo,
              title: `🚨 Diagnostics check failed on ${context.payload.ref}`,
              body: `Diagnostics tests failed on ${context.payload.ref}. [View diagnostics report](${run_url}).\n\nSee details in the [Actions tab](${run_url}).`
            });

      # Add additional step to post diagnostic summary as a comment on the PR
      - name: Comment on PR with diagnostics summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('diagnostics-report.json', 'utf8'));
              
              // Create a markdown summary of the diagnostics
              let summary = `## Diagnostics Summary\n\n`;
              summary += `Status: ${report.overall.toUpperCase()}\n\n`;
              
              // Add emoji based on status
              const statusEmoji = {
                success: '✅',
                warning: '⚠️',
                error: '❌'
              };
              
              // Add basic services section
              summary += `### Basic Services\n\n`;
              ['navigation', 'forms', 'database', 'api', 'authentication'].forEach(service => {
                if (report[service]) {
                  const emoji = statusEmoji[report[service].status] || '❓';
                  summary += `- ${emoji} ${service}: ${report[service].message}\n`;
                }
              });
              
              // Add test category summaries
              const categories = [
                { key: 'navigationTests', name: 'Navigation' },
                { key: 'apiIntegrationTests', name: 'API Integration' },
                { key: 'securityTests', name: 'Security' }
              ];
              
              summary += `\n### Test Categories\n\n`;
              categories.forEach(({ key, name }) => {
                if (Array.isArray(report[key])) {
                  const total = report[key].length;
                  const success = report[key].filter(t => t.status === 'success').length;
                  const warning = report[key].filter(t => t.status === 'warning').length;
                  const error = report[key].filter(t => t.status === 'error').length;
                  
                  let emoji = '✅';
                  if (error > 0) emoji = '❌';
                  else if (warning > 0) emoji = '⚠️';
                  
                  summary += `- ${emoji} ${name}: ${success}/${total} passed`;
                  if (warning > 0) summary += `, ${warning} warnings`;
                  if (error > 0) summary += `, ${error} errors`;
                  summary += '\n';
                }
              });
              
              // Add documentation link
              summary += `\n[View full diagnostics report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
              
              // Post the comment on the PR
              const pr_number = context.issue.number;
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: summary
              });
            } catch (error) {
              console.error('Failed to comment on PR:', error);
            }
