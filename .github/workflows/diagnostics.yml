name: Application Diagnostics & CI/CD Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  # Allow manual triggering
  workflow_dispatch:
  # Run daily to catch issues early and cleanup old records
  schedule:
    - cron: '0 0 * * *'

jobs:
  run-diagnostics:
    name: Run Enhanced Application Diagnostics
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          VITE_APP_ENV: 'ci'
          VITE_DIAGNOSTICS_ENABLED: 'true'
        
      - name: Make diagnostic scripts executable
        run: |
          chmod +x ./src/services/diagnostics/ci-scripts/enhanced-ci-runner.js
          chmod +x ./src/services/diagnostics/ci-scripts/cleanup-old-runs.js
          chmod +x ./dist/services/diagnostics/ci-scripts/run-diagnostics.js 2>/dev/null || true
          chmod +x ./dist/services/diagnostics/ci-scripts/verify-api-endpoints.js 2>/dev/null || true
        
      - name: Run enhanced diagnostics tests
        run: |
          echo "🚀 Running enhanced diagnostics with database integration..."
          node ./src/services/diagnostics/ci-scripts/enhanced-ci-runner.js \
            --environment=ci \
            --outputFile=enhanced-diagnostics-report.json \
            --failOnError=true \
            --timeout=180000
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          VITE_APP_ENV: 'ci'
          VITE_DIAGNOSTICS_ENABLED: 'true'
        
      - name: Upload enhanced diagnostics report
        if: always() # Upload even if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: enhanced-diagnostics-report
          path: enhanced-diagnostics-report.json
          
      - name: Legacy API endpoint verification (fallback)
        continue-on-error: true
        run: |
          echo "Running legacy API endpoint verification..."
          node ./dist/services/diagnostics/ci-scripts/verify-api-endpoints.js \
            --outputFile=api-endpoints-report.json \
            --failOnError=false 2>/dev/null || echo "Legacy endpoint verification skipped"
        env:
          VITE_APP_ENV: 'ci'
          
      - name: Upload API endpoint verification report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-endpoints-report
          path: api-endpoints-report.json
          
      - name: Run Jest tests for diagnostics
        continue-on-error: true
        run: npm test -- --testPathPattern=services/diagnostics 2>/dev/null || echo "Jest tests not configured"
        
  # Daily cleanup job to maintain database hygiene
  cleanup-old-runs:
    name: Cleanup Old Test Runs
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: run-diagnostics
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run cleanup script
        run: |
          echo "🧹 Running cleanup of old diagnostic test runs..."
          chmod +x ./src/services/diagnostics/ci-scripts/cleanup-old-runs.js
          node ./src/services/diagnostics/ci-scripts/cleanup-old-runs.js --retention-days=90
        
  # Notification and reporting job
  report-results:
    name: Report Results & Notifications
    runs-on: ubuntu-latest
    needs: run-diagnostics
    if: always()
    
    steps:
      - name: Download diagnostics report
        uses: actions/download-artifact@v3
        with:
          name: enhanced-diagnostics-report
          
      - name: Notify team on failure
        if: needs.run-diagnostics.result == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
            
            github.rest.issues.create({
              owner,
              repo,
              title: `🚨 Enhanced Diagnostics Failed on ${context.payload.ref}`,
              body: `Enhanced diagnostics tests failed on ${context.payload.ref}.\n\n` +
                    `**Failure Details:**\n` +
                    `- Branch: ${context.payload.ref}\n` +
                    `- Commit: ${context.sha.substring(0, 8)}\n` +
                    `- Workflow: ${run_url}\n\n` +
                    `Please review the diagnostic results and address any critical issues.`,
              labels: ['bug', 'diagnostics', 'ci-failure']
            });

      - name: Enhanced PR comment with diagnostics summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('enhanced-diagnostics-report.json', 'utf8'));
              
              // Create enhanced markdown summary
              let summary = `## 🔍 Enhanced Diagnostics Summary\n\n`;
              
              // Status overview with detailed metrics
              const statusEmoji = {
                pass: '✅',
                warning: '⚠️',
                fail: '❌',
                error: '💥'
              };
              
              const emoji = statusEmoji[report.overall_status] || '❓';
              summary += `**Overall Status:** ${emoji} ${report.overall_status.toUpperCase()}\n\n`;
              
              if (report.summary) {
                summary += `### 📊 Test Results\n`;
                summary += `- **Total Tests:** ${report.summary.total_tests}\n`;
                summary += `- **Passed:** ${report.summary.passed_tests} (${report.summary.success_rate}%)\n`;
                if (report.summary.failed_tests > 0) {
                  summary += `- **Failed:** ${report.summary.failed_tests}\n`;
                }
                if (report.summary.warning_tests > 0) {
                  summary += `- **Warnings:** ${report.summary.warning_tests}\n`;
                }
                summary += `- **Execution Time:** ${report.execution_time_ms}ms\n\n`;
              }
              
              // Database tests summary
              if (report.database_tests && report.database_tests.length > 0) {
                summary += `### 🗄️ Database Tests\n`;
                const dbTestsByArea = {};
                report.database_tests.forEach(test => {
                  if (!dbTestsByArea[test.area_feature]) {
                    dbTestsByArea[test.area_feature] = { pass: 0, fail: 0, total: 0 };
                  }
                  dbTestsByArea[test.area_feature].total++;
                  if (test.pass_fail === 'PASS') {
                    dbTestsByArea[test.area_feature].pass++;
                  } else {
                    dbTestsByArea[test.area_feature].fail++;
                  }
                });
                
                Object.entries(dbTestsByArea).forEach(([area, stats]) => {
                  const areaEmoji = stats.fail > 0 ? '❌' : '✅';
                  summary += `- ${areaEmoji} **${area}:** ${stats.pass}/${stats.total} passed\n`;
                });
                summary += '\n';
              }
              
              // Performance metrics
              if (report.performance_metrics) {
                summary += `### ⚡ Performance Metrics\n`;
                summary += `- **Database Response Time:** ${report.performance_metrics.database_response_time}ms\n`;
                if (report.performance_metrics.memory_usage) {
                  const memMB = Math.round(report.performance_metrics.memory_usage.heapUsed / 1024 / 1024);
                  summary += `- **Memory Usage:** ${memMB}MB\n`;
                }
                summary += '\n';
              }
              
              // Git information
              if (report.git) {
                summary += `### 📋 Build Information\n`;
                summary += `- **Environment:** ${report.environment}\n`;
                summary += `- **Branch:** ${report.git.branch}\n`;
                if (report.git.commit_hash) {
                  summary += `- **Commit:** ${report.git.commit_hash.substring(0, 8)}\n`;
                }
                summary += `- **Timestamp:** ${report.timestamp}\n\n`;
              }
              
              // Failed tests details (if any)
              const failedTests = report.database_tests?.filter(t => t.pass_fail === 'FAIL') || [];
              if (failedTests.length > 0) {
                summary += `### ❌ Failed Tests Details\n`;
                failedTests.forEach(test => {
                  summary += `- **${test.area_feature} - ${test.test_case}**\n`;
                  summary += `  - Expected: ${test.expected_result}\n`;
                  summary += `  - Actual: ${test.actual_result}\n`;
                  if (test.notes) summary += `  - Notes: ${test.notes}\n`;
                });
                summary += '\n';
              }
              
              summary += `[📄 View Full Report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
              
              // Post the enhanced comment
              const pr_number = context.issue.number;
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: summary
              });
              
            } catch (error) {
              console.error('Failed to post enhanced PR comment:', error);
              
              // Fallback simple comment
              const pr_number = context.issue.number;
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `## 🔍 Diagnostics Summary\n\nEnhanced diagnostics completed. View the full report in the [Actions tab](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}).`
              });
            }
