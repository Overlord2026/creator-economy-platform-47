
name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_call:
    outputs:
      security-passed:
        description: "Security scan passed"
        value: ${{ jobs.security-gate.outputs.passed }}

# Security gate - all jobs must pass to proceed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better secret detection
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run custom secret patterns scan
      run: |
        echo "Running custom secret pattern detection..."
        
        # Check for hardcoded API keys
        echo "Checking for hardcoded API keys..."
        if grep -r "sk-[a-zA-Z0-9]\{48\}" src/ --exclude-dir=node_modules; then
          echo "❌ Found potential OpenAI API keys in source code!"
          exit 1
        fi
        
        # Check for hardcoded database URLs
        echo "Checking for database connection strings..."
        if grep -r "postgres://.*:.*@" src/ --exclude-dir=node_modules; then
          echo "❌ Found potential database connection strings!"
          exit 1
        fi
        
        # Check for hardcoded AWS keys
        echo "Checking for AWS credentials..."
        if grep -r "AKIA[0-9A-Z]\{16\}" src/ --exclude-dir=node_modules; then
          echo "❌ Found potential AWS access keys!"
          exit 1
        fi
        
        # Check for hardcoded JWT secrets
        echo "Checking for JWT secrets..."
        if grep -r "jwt.*secret.*=.*[\"'][^\"']{20,}" src/ --exclude-dir=node_modules; then
          echo "❌ Found potential JWT secrets!"
          exit 1
        fi
        
        echo "✅ No custom secret patterns detected"
    
    - name: Check for unsafe secret storage patterns
      run: |
        echo "Checking for unsafe secret storage patterns..."
        
        # Check for localStorage secret storage
        if grep -r "localStorage.*API.*KEY" src/ --exclude-dir=node_modules; then
          echo "❌ Found secrets stored in localStorage!"
          exit 1
        fi
        
        # Check for sessionStorage secret storage
        if grep -r "sessionStorage.*API.*KEY" src/ --exclude-dir=node_modules; then
          echo "❌ Found secrets stored in sessionStorage!"
          exit 1
        fi
        
        # Check for hardcoded secrets in components
        if grep -r "const.*API_KEY.*=.*[\"'][^\"']{20,}" src/ --exclude-dir=node_modules; then
          echo "❌ Found hardcoded API keys in components!"
          exit 1
        fi
        
        echo "✅ No unsafe secret storage patterns detected"
    
    - name: Validate Supabase configuration
      run: |
        echo "Validating Supabase configuration..."
        
        # Check that sensitive operations use Edge Functions
        if grep -r "fetch.*api\.openai\.com" src/ --exclude-dir=node_modules; then
          echo "❌ Found direct OpenAI API calls - should use Edge Functions!"
          exit 1
        fi
        
        # Check for proper environment variable usage
        if grep -r "process\.env\." src/ --exclude-dir=node_modules --exclude="*.test.*"; then
          echo "⚠️  Found process.env usage - ensure these are not sensitive secrets"
        fi
        
        echo "✅ Supabase configuration looks good"

  vulnerability-scan:
    name: CVE & Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.vulnerability-check.outputs.vulnerabilities }}
      critical-count: ${{ steps.vulnerability-check.outputs.critical }}
      high-count: ${{ steps.vulnerability-check.outputs.high }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Snyk vulnerability scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json
        command: test
    
    - name: Run npm audit with detailed output
      id: npm-audit
      run: |
        echo "Running npm audit..."
        npm audit --json > audit-results.json || true
        
        # Parse audit results
        CRITICAL=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
        HIGH=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
        MODERATE=$(cat audit-results.json | jq '.metadata.vulnerabilities.moderate // 0')
        
        echo "Critical vulnerabilities: $CRITICAL"
        echo "High vulnerabilities: $HIGH"
        echo "Moderate vulnerabilities: $MODERATE"
        
        # Set outputs for other jobs
        echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
        echo "high=$HIGH" >> $GITHUB_OUTPUT
        echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
    
    - name: Check vulnerability thresholds
      id: vulnerability-check
      run: |
        CRITICAL=${{ steps.npm-audit.outputs.critical }}
        HIGH=${{ steps.npm-audit.outputs.high }}
        
        echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
        echo "high=$HIGH" >> $GITHUB_OUTPUT
        
        # Fail if critical or high vulnerabilities found
        if [ "$CRITICAL" -gt "0" ] || [ "$HIGH" -gt "0" ]; then
          echo "vulnerabilities=true" >> $GITHUB_OUTPUT
          echo "❌ Found $CRITICAL critical and $HIGH high severity vulnerabilities!"
          echo "This blocks the PR until vulnerabilities are fixed."
          exit 1
        else
          echo "vulnerabilities=false" >> $GITHUB_OUTPUT
          echo "✅ No critical or high severity vulnerabilities found"
        fi
    
    - name: Generate SARIF report for GitHub Security
      if: always()
      run: |
        # Convert npm audit results to SARIF format
        echo "Generating SARIF security report..."
        npx audit-ci --config .auditci.json --output-format sarif --output audit-results.sarif || true
    
    - name: Upload SARIF results to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: audit-results.sarif
    
    - name: Auto-create security patch PR
      if: steps.vulnerability-check.outputs.vulnerabilities == 'true'
      run: |
        echo "Creating automated security patch..."
        # This will be handled by Dependabot, but we log it here
        echo "Dependabot will automatically create security patch PRs"
        echo "Critical vulnerabilities require manual review within 24 hours"

  security-gate:
    name: Security Gate - Block PR if vulnerabilities found
    runs-on: ubuntu-latest
    needs: [secret-scan, vulnerability-scan]
    outputs:
      passed: ${{ steps.gate-decision.outputs.passed }}
    if: always()
    
    steps:
    - name: Evaluate security gate
      id: gate-decision
      run: |
        SECRET_SCAN="${{ needs.secret-scan.result }}"
        VULN_SCAN="${{ needs.vulnerability-scan.result }}"
        CRITICAL_COUNT="${{ needs.vulnerability-scan.outputs.critical-count }}"
        HIGH_COUNT="${{ needs.vulnerability-scan.outputs.high-count }}"
        
        echo "## 🔐 Security Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check secret scan results
        if [ "$SECRET_SCAN" == "success" ]; then
          echo "✅ **Secrets Scan**: PASSED - No hardcoded secrets detected" >> $GITHUB_STEP_SUMMARY
          SECRET_PASS=true
        else
          echo "❌ **Secrets Scan**: FAILED - Secrets found in code" >> $GITHUB_STEP_SUMMARY
          SECRET_PASS=false
        fi
        
        # Check vulnerability scan results  
        if [ "$VULN_SCAN" == "success" ]; then
          echo "✅ **Vulnerability Scan**: PASSED - No critical/high vulnerabilities" >> $GITHUB_STEP_SUMMARY
          VULN_PASS=true
        else
          echo "❌ **Vulnerability Scan**: FAILED - $CRITICAL_COUNT critical, $HIGH_COUNT high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          VULN_PASS=false
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Make final decision
        if [ "$SECRET_PASS" == "true" ] && [ "$VULN_PASS" == "true" ]; then
          echo "✅ **SECURITY GATE: PASSED** - Safe to merge" >> $GITHUB_STEP_SUMMARY
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ **SECURITY GATE: BLOCKED** - Must fix security issues before merge" >> $GITHUB_STEP_SUMMARY
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Required Actions:" >> $GITHUB_STEP_SUMMARY
          echo "1. Fix all secrets detected in code" >> $GITHUB_STEP_SUMMARY
          echo "2. Update dependencies with critical/high vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "3. Re-run security checks until all pass" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const passed = '${{ steps.gate-decision.outputs.passed }}' === 'true';
          const critical = '${{ needs.vulnerability-scan.outputs.critical-count }}' || '0';
          const high = '${{ needs.vulnerability-scan.outputs.high-count }}' || '0';
          
          const body = passed 
            ? `## ✅ Security Gate: PASSED
            
            All security checks have passed. This PR is safe to merge.
            
            - ✅ No secrets detected in code
            - ✅ No critical or high severity vulnerabilities
            - ✅ All dependencies are secure`
            : `## ❌ Security Gate: BLOCKED
            
            This PR contains security issues and cannot be merged until fixed.
            
            **Issues Found:**
            - Critical vulnerabilities: ${critical}
            - High severity vulnerabilities: ${high}
            
            **Next Steps:**
            1. Check the security scan results above
            2. Update vulnerable dependencies: \`npm audit fix\`
            3. Remove any hardcoded secrets from code
            4. Push fixes and re-run security checks`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  emergency-patch:
    name: Emergency Security Patching
    runs-on: ubuntu-latest
    needs: [vulnerability-scan]
    if: needs.vulnerability-scan.outputs.critical-count > 0
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Attempt automatic security fixes
      run: |
        echo "Attempting to automatically fix critical vulnerabilities..."
        npm audit fix --force
        
        # Check if fixes were applied
        if [ -n "$(git status --porcelain)" ]; then
          echo "Security patches applied automatically"
          git config user.name "Security Bot"
          git config user.email "security-bot@company.com"
          git add package*.json
          git commit -m "security: auto-fix critical vulnerabilities
          
          - Applied npm audit fix --force
          - Critical security patches applied within 24h SLA
          - Auto-generated by security pipeline"
          
          # Create emergency patch PR
          git push origin HEAD:emergency-security-patch-$(date +%Y%m%d-%H%M%S)
        else
          echo "No automatic fixes available - manual intervention required"
        fi
    
    - name: Create emergency security issue
      uses: actions/github-script@v7
      with:
        script: |
          const critical = '${{ needs.vulnerability-scan.outputs.critical-count }}';
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 CRITICAL: ${critical} Critical Security Vulnerabilities Detected`,
            body: `## Critical Security Alert
            
            **${critical} critical vulnerabilities** have been detected that require immediate attention.
            
            ### SLA Requirement
            All critical vulnerabilities must be patched within 24 hours.
            
            ### Automatic Actions Taken
            - Attempted automatic patching with \`npm audit fix\`
            - Created emergency patch branch if fixes were available
            
            ### Manual Actions Required
            1. Review vulnerability details in the security scan results
            2. Apply manual patches if automatic fixes failed
            3. Test all critical functionality after patching
            4. Deploy patches to production within 24 hours
            
            ### Vulnerability Details
            Check the [Security tab](/${context.repo.owner}/${context.repo.repo}/security) for full details.
            
            **This issue will auto-close when vulnerabilities are resolved.**`,
            labels: ['security', 'critical', 'bug'],
            assignees: ['@octocat'] // Replace with actual security team
          });
