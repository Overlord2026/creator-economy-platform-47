
name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better secret detection
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run custom secret patterns scan
      run: |
        echo "Running custom secret pattern detection..."
        
        # Check for hardcoded API keys
        echo "Checking for hardcoded API keys..."
        if grep -r "sk-[a-zA-Z0-9]\{48\}" src/ --exclude-dir=node_modules; then
          echo "❌ Found potential OpenAI API keys in source code!"
          exit 1
        fi
        
        # Check for hardcoded database URLs
        echo "Checking for database connection strings..."
        if grep -r "postgres://.*:.*@" src/ --exclude-dir=node_modules; then
          echo "❌ Found potential database connection strings!"
          exit 1
        fi
        
        # Check for hardcoded AWS keys
        echo "Checking for AWS credentials..."
        if grep -r "AKIA[0-9A-Z]\{16\}" src/ --exclude-dir=node_modules; then
          echo "❌ Found potential AWS access keys!"
          exit 1
        fi
        
        # Check for hardcoded JWT secrets
        echo "Checking for JWT secrets..."
        if grep -r "jwt.*secret.*=.*[\"'][^\"']{20,}" src/ --exclude-dir=node_modules; then
          echo "❌ Found potential JWT secrets!"
          exit 1
        fi
        
        echo "✅ No custom secret patterns detected"
    
    - name: Check for unsafe secret storage patterns
      run: |
        echo "Checking for unsafe secret storage patterns..."
        
        # Check for localStorage secret storage
        if grep -r "localStorage.*API.*KEY" src/ --exclude-dir=node_modules; then
          echo "❌ Found secrets stored in localStorage!"
          exit 1
        fi
        
        # Check for sessionStorage secret storage
        if grep -r "sessionStorage.*API.*KEY" src/ --exclude-dir=node_modules; then
          echo "❌ Found secrets stored in sessionStorage!"
          exit 1
        fi
        
        # Check for hardcoded secrets in components
        if grep -r "const.*API_KEY.*=.*[\"'][^\"']{20,}" src/ --exclude-dir=node_modules; then
          echo "❌ Found hardcoded API keys in components!"
          exit 1
        fi
        
        echo "✅ No unsafe secret storage patterns detected"
    
    - name: Validate Supabase configuration
      run: |
        echo "Validating Supabase configuration..."
        
        # Check that sensitive operations use Edge Functions
        if grep -r "fetch.*api\.openai\.com" src/ --exclude-dir=node_modules; then
          echo "❌ Found direct OpenAI API calls - should use Edge Functions!"
          exit 1
        fi
        
        # Check for proper environment variable usage
        if grep -r "process\.env\." src/ --exclude-dir=node_modules --exclude="*.test.*"; then
          echo "⚠️  Found process.env usage - ensure these are not sensitive secrets"
        fi
        
        echo "✅ Supabase configuration looks good"

  dependency-scan:
    name: Dependency Security Scan  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level high
    
    - name: Check for known vulnerabilities
      run: |
        echo "Checking for known security vulnerabilities..."
        npx audit-ci --config .auditci.json || echo "No audit-ci config found, skipping"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan]
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "## 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.secret-scan.result }}" == "success" ]; then
          echo "✅ **Secret scan passed** - No hardcoded secrets detected" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Secret scan failed** - Potential secrets found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Dependency Security Results" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
          echo "✅ **Dependency scan passed** - No high-risk vulnerabilities" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependency scan failed** - Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- Use Supabase Edge Functions for all API integrations requiring secrets" >> $GITHUB_STEP_SUMMARY
        echo "- Store all sensitive data in Supabase Edge Function environment variables" >> $GITHUB_STEP_SUMMARY
        echo "- Never commit API keys, passwords, or tokens to source control" >> $GITHUB_STEP_SUMMARY
        echo "- Use the SecretsMonitor component to detect runtime security issues" >> $GITHUB_STEP_SUMMARY
