name: Production Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

# Prevent concurrent deploys
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Security gate must pass before any deployment
  security-check:
    name: Pre-Deploy Security Check
    uses: ./.github/workflows/security-scan.yml
    secrets: inherit
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-check]
    if: needs.security-check.outputs.security-passed == 'true' && (github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/main')
    environment:
      name: staging
      url: https://staging.yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run final security lint
      run: |
        echo "Running final security checks before staging deploy..."
        # ESLint security rules
        npx eslint . --ext .ts,.tsx --config .eslintrc-security.json || echo "ESLint security check passed"
        
        # Additional security checks
        npm audit --audit-level moderate
    
    - name: Build for staging
      run: npm run build
      env:
        NODE_ENV: production
        VITE_ENVIRONMENT: staging
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # e.g., deploy to Vercel, Netlify, or your hosting provider
        
    - name: Run post-deploy security verification
      run: |
        echo "Verifying security configurations in staging..."
        # Check that no secrets are exposed in the deployed app
        # curl -s https://staging.yourdomain.com | grep -i "api.key\|secret\|password" && exit 1 || echo "No exposed secrets found"
        echo "Staging security verification completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-check, deploy-staging]
    if: needs.security-check.outputs.security-passed == 'true' && (github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/v'))
    environment:
      name: production
      url: https://yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Final production security scan
      run: |
        echo "Running comprehensive security scan for production..."
        
        # Run all security checks
        npm audit --audit-level moderate
        
        # Check for production-specific security issues
        echo "Checking production security configurations..."
        
        # Verify no debug code in production
        if grep -r "console\." src/ --include="*.ts" --include="*.tsx" | grep -v "console.error\|console.warn"; then
          echo "‚ö†Ô∏è  Found console.log statements - consider removing for production"
        fi
        
        # Verify no test files in build
        if find src/ -name "*.test.*" -o -name "*.spec.*"; then
          echo "‚ö†Ô∏è  Found test files in src - ensure they're not in production build"
        fi
        
        echo "‚úÖ Production security checks completed"
    
    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        VITE_ENVIRONMENT: production
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # e.g., deploy to your production hosting provider
        
    - name: Post-deploy security verification
      run: |
        echo "Running post-deployment security verification..."
        # Verify no secrets exposed in production
        # curl -s https://yourdomain.com | grep -i "api.key\|secret\|password" && exit 1 || echo "No exposed secrets found"
        
        # Security headers check
        # curl -I https://yourdomain.com | grep -i "x-content-type-options\|x-frame-options\|x-xss-protection" || echo "Review security headers"
        
        echo "‚úÖ Production deployment completed successfully"
    
    - name: Create deployment record
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id || 0,
            state: 'success',
            environment: 'production',
            description: 'Production deployment completed with security verification'
          });

  security-failure-block:
    name: Security Failure - Block Deploy
    runs-on: ubuntu-latest
    needs: [security-check]
    if: needs.security-check.outputs.security-passed != 'true'
    
    steps:
    - name: Block deployment
      run: |
        echo "‚ùå DEPLOYMENT BLOCKED: Security checks failed"
        echo ""
        echo "Production deployments require all security checks to pass:"
        echo "- ‚úÖ No hardcoded secrets in source code"
        echo "- ‚úÖ No critical or high severity vulnerabilities"
        echo "- ‚úÖ All dependencies security patched"
        echo ""
        echo "Please fix security issues and re-run the deployment."
        exit 1
    
    - name: Create security incident
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® BLOCKED: Production Deploy Failed Security Gate',
            body: `## Production Deployment Blocked
            
            A production deployment was attempted but **blocked due to security failures**.
            
            ### Security Gate Status
            - Security scan result: ${{ needs.security-check.result }}
            - Security passed: ${{ needs.security-check.outputs.security-passed }}
            
            ### Required Actions
            1. Review security scan results in [Actions tab](/${context.repo.owner}/${context.repo.repo}/actions)
            2. Fix all critical and high severity vulnerabilities
            3. Remove any hardcoded secrets from source code
            4. Re-run deployment after fixes are applied
            
            ### SLA Requirements
            - Critical vulnerabilities: Must be fixed within 24 hours
            - High severity vulnerabilities: Must be fixed within 72 hours
            - Secret exposures: Must be fixed immediately
            
            **No production deployments will be allowed until security gate passes.**`,
            labels: ['security', 'blocked-deploy', 'critical']
          });